diff --git src/google/protobuf/util/time_util.cc src/google/protobuf/util/time_util.cc
index 031d019..9a4a53f 100644
--- src/google/protobuf/util/time_util.cc
+++ src/google/protobuf/util/time_util.cc
@@ -44,6 +44,15 @@ namespace util {
 using google::protobuf::Timestamp;
 using google::protobuf::Duration;
 
+// The min/max Timestamp/Duration values we support.
+//
+// For "0001-01-01T00:00:00Z".
+const int64 TimeUtil::kTimestampMinSeconds = -62135596800LL;
+// For "9999-12-31T23:59:59.999999999Z".
+const int64 TimeUtil::kTimestampMaxSeconds = 253402300799LL;
+const int64 TimeUtil::kDurationMinSeconds = -315576000000LL;
+const int64 TimeUtil::kDurationMaxSeconds = 315576000000LL;
+
 namespace {
 static const int kNanosPerSecond = 1000000000;
 static const int kMicrosPerSecond = 1000000;
@@ -142,13 +151,6 @@ int64 RoundTowardZero(int64 value, int64 divider) {
 }
 }  // namespace
 
-// Actually define these static const integers. Required by C++ standard (but
-// omitting them may still work with some compilers).
-const int64 TimeUtil::kTimestampMinSeconds;
-const int64 TimeUtil::kTimestampMaxSeconds;
-const int64 TimeUtil::kDurationMaxSeconds;
-const int64 TimeUtil::kDurationMinSeconds;
-
 string TimeUtil::ToString(const Timestamp& timestamp) {
   return FormatTime(timestamp.seconds(), timestamp.nanos());
 }
diff --git src/google/protobuf/util/time_util.h src/google/protobuf/util/time_util.h
index 1bac089..74f06e3 100644
--- src/google/protobuf/util/time_util.h
+++ src/google/protobuf/util/time_util.h
@@ -55,11 +55,11 @@ class LIBPROTOBUF_EXPORT TimeUtil {
   // The min/max Timestamp/Duration values we support.
   //
   // For "0001-01-01T00:00:00Z".
-  static const int64 kTimestampMinSeconds = -62135596800LL;
+  static const int64 kTimestampMinSeconds;
   // For "9999-12-31T23:59:59.999999999Z".
-  static const int64 kTimestampMaxSeconds = 253402300799LL;
-  static const int64 kDurationMinSeconds = -315576000000LL;
-  static const int64 kDurationMaxSeconds = 315576000000LL;
+  static const int64 kTimestampMaxSeconds;
+  static const int64 kDurationMinSeconds;
+  static const int64 kDurationMaxSeconds;
 
   // Converts Timestamp to/from RFC 3339 date string format.
   // Generated output will always be Z-normalized and uses 3, 6 or 9
